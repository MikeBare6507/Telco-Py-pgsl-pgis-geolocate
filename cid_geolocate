import psycopg2
from psycopg2 import sql
from shapely.geometry import Point
from shapely.wkt import loads as wkt_loads
from shapely.ops import transform
import random
import math
from shapely.geometry import shape

# Define the distance ranges for each fip_type
DISTANCE_RANGES = {
    'C1': 25, 'C2': 25, 'C3': 25,
    'C4': 35, 'C5': 35,
    'rr1': 10, 'rr2': 10,
    'r01': 30, 'r02': 30
}

def generate_random_point(fip_geom_wkt, max_distance):
    # Convert WKT to a Shapely geometry object
    fip_geom = wkt_loads(fip_geom_wkt)

    # Get the centroid of the fip_geom (handles Polygon or MultiPolygon)
    if fip_geom.geom_type in ['Polygon', 'MultiPolygon']:
        fip_centroid = fip_geom.centroid
    else:
        raise ValueError(f"Expected Polygon or MultiPolygon, but got {fip_geom.geom_type}")

    # Convert max_distance to degrees (approximation)
    max_distance_deg = max_distance / 111  # 1 degree ~ 111 km

    # Generate random angle and distance for the point
    angle = random.uniform(0, 2 * math.pi)
    distance = random.uniform(0, max_distance_deg)

    # Calculate new coordinates for the random point
    new_lat = fip_centroid.y + (distance * math.sin(angle))
    new_lon = fip_centroid.x + (distance * math.cos(angle))

    return Point(new_lon, new_lat)

# Establish PostgreSQL connection
conn = psycopg2.connect(
    dbname="postgis_34_sample",
    user="postgres",
    password="0624",
    host="localhost",
    port="5432"
)

cursor = conn.cursor()

# Fetch all the relevant data from the cid_geom_gen table
cursor.execute("""
    SELECT cid, fip_type, fip_geom, mkt_geom 
    FROM cid_geom_gen WHERE cid LIKE 'ETX%';
""")
records = cursor.fetchall()

# Iterate through each cid
for record in records:
    cid, fip_type, fip_geom_wkt, mkt_geom_wkt = record

    # Get the maximum distance based on the fip_type
    max_distance = DISTANCE_RANGES.get(fip_type, 10)  # Default distance if fip_type not found

    # Generate a random point around the fip_geom centroid
    random_point = generate_random_point(fip_geom_wkt, max_distance)

    # Convert market geometry to Shapely shape
    market_polygon = wkt_loads(mkt_geom_wkt)

    # Ensure the random point is within the market polygon
    while not market_polygon.contains(random_point):
        random_point = generate_random_point(fip_geom_wkt, max_distance)

    # Update the database with the new point geometry in WKT format
    cursor.execute("""
        UPDATE cid_geom_gen
        SET cid_geom = %s
        WHERE cid = %s;
    """, (random_point.wkt, cid))

# Commit the changes
conn.commit()

# Close the connection
cursor.close()
conn.close()

# Notify the user that the script has finished
print("Script has finished running successfully!")
