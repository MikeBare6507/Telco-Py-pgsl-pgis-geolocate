import pandas as pd
import numpy as np
import string
import os
from datetime import datetime

# STEP 1: Set file paths for fetching data and creating new table data file

# A. Make the output file path and new file name that includes date/time

# Get the current date and time
current_time = datetime.now().strftime("%Y%m%d_%H%M%S")

# Output path for CSV file with date and time
output_path = r"C:\Users\erabe\OneDrive\Portfolio\TelcoWithPython\Telco Generated Data\TelcoDatagen_fixes_20241019\cid_inventory_" + current_time + ".csv"

# Ensure the directory exists
os.makedirs(os.path.dirname(output_path), exist_ok=True)

# B. Input file paths, for files from which data is fetched
cid_list_path = r"C:\Users\erabe\OneDrive\Portfolio\TelcoWithPython\Telco Generated Data\TelcoDatagen_fixes_20241019\data-1730233542858.csv"
parts_list_path = r"C:\Users\erabe\OneDrive\Portfolio\TelcoWithPython\Usable table files\Parts.csv"

# C. Load input files into DataFrames
cid_list_df = pd.read_csv(cid_list_path)
parts_df = pd.read_csv(parts_list_path)

# STEP 2: Define parts selection function
def select_parts(prefix, min_parts, max_parts):
    parts = parts_df[parts_df['PartNo'].str.startswith(prefix)]['PartNo']
    num_parts = np.random.randint(min_parts, max_parts + 1)
    if len(parts) < num_parts:
        num_parts = len(parts)
    if num_parts == 0:
        return []
    return list(np.random.choice(parts, size=num_parts, replace=False))

# STEP 3: Define selection conditions algorithms
def LtBg():
    return (select_parts("RFLT", 15, 20) +
            select_parts("SLG", 8, 15) +
            select_parts("GT", 8, 15) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
	        select_parts("AN", 1, 3) +
            select_parts("POW", 6, 10))

def LtMd():
    return (select_parts("RFLT", 9, 15) +
            select_parts("SLT", 6, 10) +
            select_parts("GT", 5, 9) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
		    select_parts("AN", 1, 3) +
            select_parts("POW", 3, 8))

def LtSm():
    return (select_parts("RFLT", 6, 10) +
            select_parts("SLT", 4, 8) +
            select_parts("GT", 3, 7) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
	        select_parts("AN", 1, 3) +
            select_parts("POW", 2, 4))

def LgBg():
    return (select_parts("RAFLT", 15, 20) +
            select_parts("SLG", 8, 15) +
            select_parts("GT", 8, 15) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
	        select_parts("AN", 1, 3) +
            select_parts("POW", 6, 10))

def LgMd():
    return (select_parts("RAFLT", 9, 15) +
            select_parts("SLG", 6, 10) +
            select_parts("GT", 5, 9) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
            select_parts("AN", 1, 3) +
            select_parts("POW", 3, 8))

def LgSm():
    return (select_parts("RAFLT", 6, 10) +
            select_parts("SLG", 4, 8) +
            select_parts("GT", 3, 7) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
		    select_parts("AN", 1, 3) +
            select_parts("POW", 2, 4))

def PtBg():
    return (select_parts("PT-RF", 15, 20) +
            select_parts("PT-S", 8, 15) +
            select_parts("GT", 8, 15) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
		    select_parts("AN", 1, 3) +
            select_parts("POW", 6, 10))

def PtMd():
    return (select_parts("PTRF", 9, 15) +
            select_parts("PT-S", 6, 10) +
            select_parts("GT", 5, 9) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
		    select_parts("AN", 1, 3) +
            select_parts("POW", 3, 8))

def PtSm():
    return (select_parts("PTRF", 6, 10) +
            select_parts("PT-S", 4, 8) +
            select_parts("GT", 3, 7) +
            select_parts("FBI", 1, 1) +
            select_parts("AC", 1, 3) +
	        select_parts("AN", 1, 3) +
            select_parts("POW", 2, 4))

# STEP 4: Create function to choose algorithm on the basis of prime manufacturer and site_size
def get_parts(prime_manu, site_size):
    if prime_manu == "LT":
        if site_size == "Bg":
            return LtBg()
        elif site_size == "Md":
            return LtMd()
        elif site_size == "Sm":
            return LtSm()
    elif prime_manu == "LG":
        if site_size == "Bg":
            return LgBg()
        elif site_size == "Md":
            return LgMd()
        elif site_size == "Sm":
            return LgSm()
    elif prime_manu == "PT":
        if site_size == "Bg":
            return PtBg()
        elif site_size == "Md":
            return PtMd()
        elif site_size == "Sm":
            return PtSm()
    return []

# STEP 5: Create the CID_Inventory DataFrame
cid_inventory_data = []

# Iterate through each row in the cids dataframe
for _, row in cid_list_df.iterrows():
    cid = row['cid']
    prime_manu = row['prime_manu']
    site_size = row['site_size']
    parts_list = get_parts(prime_manu, site_size)
    for part_no in parts_list:
        cid_inventory_data.append([cid, part_no])

# Convert data to a DataFrame
cid_inventory_df = pd.DataFrame(cid_inventory_data, columns=['cid', 'part_no'])

# STEP 6: Generate asset IDs and add as the last column
def generate_asset_id():
    first_two_chars = 'WW'
    six_digit_number1 = np.random.randint(100000, 999999)
    random_letter = np.random.choice(list(string.ascii_uppercase))
    five_digit_number2 = np.random.randint(10000, 99999)
    asset_id = f"{first_two_chars}{six_digit_number1}{random_letter}{five_digit_number2}"
    return asset_id

cid_inventory_df['asset_id'] = cid_inventory_df.apply(lambda _: generate_asset_id(), axis=1)

# STEP 7: Save the data into the new file
cid_inventory_df.to_csv(output_path, index=False)
