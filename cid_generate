import pandas as pd
import numpy as np
import string
import os
import random  # Added import for the random module
from datetime import datetime

# STEP 1: Set file paths for fetching data and creating new folder and table data file

# Get the current date and time to use in naming the new folder and file
current_time = datetime.now().strftime("%Y%m%d_%H%M%S")

# A. Create a new folder called "TelcoDataGen" + current date/time
base_output_dir = r"C:\Users\Mike\OneDrive\Portfolio\TelcoWithPython\Telco Generated Data"
new_folder_name = "TelcoDataGen_" + current_time
output_folder = os.path.join(base_output_dir, new_folder_name)

# Ensure the directory exists (create it if it doesn't)
os.makedirs(output_folder, exist_ok=True)

# B. Make the output file path and CSV file name called "cid_gen" + current date/time
output_file_name = "cid_gen_" + current_time + ".csv"
output_path = os.path.join(output_folder, output_file_name)

# Example of saving a DataFrame to this path
# df.to_csv(output_path, index=False)

print(f"CSV file will be saved to: {output_path}")

# STEP 2: Make random generation variables

# Function to generate random numbers based on the provided range
def rndNumGen(start, end):
    return random.randint(start, end)

# Defining variables for random number generation with the specified ranges
rnd0_1 = lambda: rndNumGen(0, 1)
rnd1_2 = lambda: rndNumGen(1, 2)
rnd1_3 = lambda: rndNumGen(1, 3)
rnd1_4 = lambda: rndNumGen(1, 4)
rnd1_5 = lambda: rndNumGen(1, 5)
rnd1_6 = lambda: rndNumGen(1, 6)
rnd2_3 = lambda: rndNumGen(2, 3)
rnd3_4 = lambda: rndNumGen(3, 4)
rnd750_999 = lambda: rndNumGen(750, 999)
rnd650_800 = lambda: rndNumGen(650, 800)
rnd400_667 = lambda: rndNumGen(400, 667)

# Example usage: calling one of the random variables
#print("Random number between 400 and 667:", rnd400_667())

# STEP 3: Define markets

# A. Make/store market sets/arrays

bgMkt = ['HOU', 'DFW', 'CHI']
mdMkt = ['AUS', 'SAN', 'OKC', 'TUL', 'KSC', 'STL', 'NOL', 'LOU', 'OMA', 'WIM', 'MNM', 'IAW']
smMkt = ['WTX', 'ETX', 'ARK', 'OGA', 'SDA', 'NDA']

# B. Function to generate CIDs for each batch of markets

def make_cids(mktPrefix4, pop_range_func):
    data = []
    for prefix in mktPrefix4:
        # Generate random market population size range factor
        rangefactor = pop_range_func()

        # Create rows for the market prefix
        for i in range(1, rangefactor + 1):
            # Format the number with leading zeros
            number = f"{i:03}"

            # Concatenate mktPrefix4 and number
            cid = prefix + number

            # Append CID to data list
            data.append(cid)
    return data

# C. Generate CIDs for each market

bgMktCid = make_cids(['HOUA', 'HOUB', 'HOUC', 'DFWA', 'DFWB', 'DFWC', 'CHIA', 'CHIB', 'CHIC'], rnd750_999)
mdMktCid = make_cids(['AUSA', 'AUSB', 'SANA', 'SANB', 'OKCA', 'OKCB', 'TULA', 'KSCA', 'KSCB', 'STLA', 'STLB', 'NOLA', 'NOLB', 'LAUA', 'OMAA', 'WIMA', 'WIMB', 'MNAA', 'MNAB', 'IOWA'], rnd650_800)
smMktCid = make_cids(['WTXA', 'ETXA', 'ARKA', 'OGAA', 'SDAA', 'NDAA'], rnd400_667)

# D. Combine all CIDs into one list

all_cids = bgMktCid + mdMktCid + smMktCid

# E. Create DataFrame from CID list

df = pd.DataFrame(all_cids, columns=['cid'])

# STEP 2: Assign states

# Function to evaluate prefix to assign state

def assignState(cid):
    cid_prefix = cid[:2]  # Get first two characters of cid

    if cid_prefix in ["HO", "DF", "AU", "SA", "WT", "ET"]:
        return "TX"
    elif cid_prefix in ["CH"]:
        return "IL"
    elif cid_prefix in ["OK", "TU"]:
        return "OK"
    elif cid_prefix in ["KS"]:
        return "KS"
    elif cid_prefix in ["ST"]:
        return "MO"
    elif cid_prefix in ["OM", "OG"]:
        return "NE"
    elif cid_prefix in ["NO", "LO"]:
        return "LA"
    elif cid_prefix in ["AR"]:
        return "AR"
    elif cid_prefix in ["IA"]:
        return "IA"  
    elif cid_prefix in ["ND"]:
        return "ND"
    elif cid_prefix in ["SD"]:
        return "SD"
    elif cid_prefix in ["WI"]:
        return "WI"
    elif cid_prefix in ["MN"]:
        return "MN"
    else:
        return None  # Return None if the prefix does not match any state

# Apply assignState function to assign state
df['state'] = df['cid'].apply(assignState)

# STEP 3: Assign markets to a market column

# Function to extract market from cid
def assignMarket(cid):
    return cid[:4]  # Get first four characters of cid

# Apply assignMarket function to assign market
df['market'] = df['cid'].apply(assignMarket)

# STEP 4: Assign market size

# A. Add new column for site size
df['site_size'] = ''

# B. Determine site_size based on weighted probabilities
def determine_site_size(market):
    
    # define market categories
    if market[:3] in bgMkt:
        if np.random.randint(2) == 1:
            return np.random.choice(['Bg', 'Md', 'Sm'], p=[0.7, 0.2, 0.1])
        else:
            return np.random.choice(['Bg', 'Md', 'Sm'], p=[0.85, 0.1, .05])
    elif market[:3] in mdMkt:
        if np.random.randint(2) == 1:
            return np.random.choice(['Bg', 'Md', 'Sm'], p=[0.4, 0.4, 0.2])
        else:
            return np.random.choice(['Bg', 'Md', 'Sm'], p=[0.5, 0.38, .12])
    elif market[:3] in smMkt:
        if np.random.randint(2) == 1:
            return np.random.choice(['Bg', 'Md', 'Sm'], p=[0.1, 0.5, 0.4])
        else:
            return np.random.choice(['Bg', 'Md', 'Sm'], p=[0.15, 0.5, .35])
    else:
        return 'Unknown'

# C. Iterate through each row and assign a site_size value
df['site_size'] = df['market'].apply(determine_site_size)

# STEP 5: Assign prime manufacturer based on the 4-character prefix from the original market sets arrays

# A. Create new column for prime manufacturer
df['prime_manu'] = ''

# B. Function to randomly select values and update prime_manu column
def assign_prime_manu(market_list, label, select_range):
    selected_markets = random.sample(market_list, random.randint(*select_range))
    for market in selected_markets:
        df.loc[df['market'] == market[:4], 'prime_manu'] = label

# C. Apply the selections and assignments
assign_prime_manu(bgMkt, 'LT', (1,2))
assign_prime_manu(mdMkt, 'LT', (0,1))
assign_prime_manu(smMkt, 'LT', (0,1))
assign_prime_manu(bgMkt, 'PT', (1,2))
assign_prime_manu(mdMkt, 'PT', (0,1))
assign_prime_manu(smMkt, 'PT', (0,1))

# Put 'LG' in all rows that do not yet have a value for prime_manu
df.loc[df['prime_manu'] == '', 'prime_manu'] = 'LG'

# FINAL STEP: Save updated DataFrame back to CSV file
df.to_csv(output_path, index=False)
